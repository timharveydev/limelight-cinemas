/* MAIN.SCSS
--------------------------------------------*/
/**
 * SASS folder structure is based on the 7-1 pattern by Hugo Giraudel.
 * More info at https://sass-guidelin.es/#architecture
 *
 * This project makes use of BEM CSS naming conventions.
*/
/* COLOURS
--------------------------------------------*/
/* FONTS
--------------------------------------------*/
/* MIXINS
--------------------------------------------*/
/* RESET
--------------------------------------------*/
* {
  margin: 0;
  padding: 0;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

/* BASE STYLES
--------------------------------------------*/
body {
  width: 100vw;
  max-width: 100vw;
  min-height: 100vh;
  background-color: #3b3b3b;
  color: #f3f3f3;
}

/* TYPOGRAPHY
--------------------------------------------*/
html {
  font-size: 62.5%;
}

body {
  font-family: "Open Sans", sans-serif;
  font-size: 1.4rem;
  font-weight: 400;
  line-height: 1.6rem;
  letter-spacing: 0.06rem;
}

h1, h2, h3, h4, h5, h6 {
  font-family: "Montserrat", sans-serif;
}

h1 {
  font-size: 4.8rem;
  font-weight: 400;
  line-height: 4.8rem;
  letter-spacing: 0.2rem;
}

h2 {
  font-size: 3.2rem;
  font-weight: 500;
  line-height: 3.2rem;
  letter-spacing: 0.2rem;
}

h3 {
  font-size: 2.4rem;
  font-weight: 500;
  line-height: 2.4rem;
  letter-spacing: 0.2rem;
}

h4 {
  font-size: 1.8rem;
  font-weight: 600;
  line-height: 1.8rem;
  letter-spacing: 0.2rem;
}

h5 {
  font-size: 1.4rem;
  font-weight: 600;
  line-height: 1.4rem;
  letter-spacing: 0.2rem;
}

h6 {
  font-size: 1.2rem;
  font-weight: 600;
  line-height: 1.2rem;
  letter-spacing: 0.2rem;
}

/* GRID
--------------------------------------------*/
/**
 * This is a simple Flexbox grid system which is intended to be easy to use and easy to customize.
 * 
 * 1. Add the .grid class to a parent element.
 * 2. Add the .column class to direct child elements.
 *
 * By default, columns will all be the same width and will keep stacking to fill all available space.
 *
 * 3. Add the .bigger class to any .column elements that should be wider.
 *    The flex value can be increased/decreased as desired.
 * 4. Add the .halves/.thirds etc. classes to the .grid element to force a fixed number of columns.
 *
 * 5. The media query breaks the columns into block items at smaller screen sizes.
 *
 * Credit to Mark Thomas Miller.
 * More info at https://mtm.dev/grid
*/
.grid {
  /* [1] */
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
}

.column {
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
}

/* [2] */
.bigger {
  -webkit-box-flex: 2.5;
      -ms-flex: 2.5;
          flex: 2.5;
}

/* [3] */
.halves .column {
  -webkit-box-flex: 0;
      -ms-flex: 0 0 50%;
          flex: 0 0 50%;
}

/* [4] */
.thirds .column {
  -webkit-box-flex: 0;
      -ms-flex: 0 0 33.3333%;
          flex: 0 0 33.3333%;
}

/* [4] */
.fourths .column {
  -webkit-box-flex: 0;
      -ms-flex: 0 0 25%;
          flex: 0 0 25%;
}

/* [4] */
@media (max-width: 900px) {
  /* [5] */
  .grid {
    display: block;
  }
}

/* WRAPPERS
--------------------------------------------*/
.container {
  width: 90%;
  margin: 0 auto;
}

/* NAVIGATION
--------------------------------------------*/
/* FOOTER
--------------------------------------------*/
/* BUTTONS
--------------------------------------------*/
/* CAROUSEL
--------------------------------------------*/
/* FORMS
--------------------------------------------*/
/* INDEX
--------------------------------------------*/
/* JUNIOR
--------------------------------------------*/
/* ADMIN
--------------------------------------------*/
/*# sourceMappingURL=main.css.map */